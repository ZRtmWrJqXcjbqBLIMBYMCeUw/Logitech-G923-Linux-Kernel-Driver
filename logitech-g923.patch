--- hid-logitech-hidpp.c.orig	2020-10-14 19:33:30.123894724 -0400
+++ hid-logitech-hidpp.c	2020-10-14 19:39:11.169270969 -0400
@@ -62,6 +62,7 @@ MODULE_PARM_DESC(disable_tap_to_click,
 #define HIDPP_QUIRK_CLASS_K400			BIT(2)
 #define HIDPP_QUIRK_CLASS_G920			BIT(3)
 #define HIDPP_QUIRK_CLASS_K750			BIT(4)
+#define HIDPP_QUIRK_CLASS_G923			BIT(5)
 
 /* bits 2..20 are reserved for classes */
 /* #define HIDPP_QUIRK_CONNECT_EVENTS		BIT(21) disabled */
@@ -2950,6 +2951,89 @@ static int g920_get_config(struct hidpp_
 	return g920_ff_set_autocenter(hidpp, data);
 }
 
+/* ------------------------------------------------------------------------- */
+/* Logitech G923 Driving Force Racing Wheel for PC and PS4                   */
+/* ------------------------------------------------------------------------- */
+
+#define HIDPP_PAGE_G923_FORCE_FEEDBACK			0x8127
+/* One of these is for force feedback the other may be for TrueForce though i am not sure (no documentation...). */
+/* It seems 8127 is for force feedback. */
+//#define HIDPP_PAGE_G923_FORCE_FEEDBACK		0x8124
+//#define HIDPP_PAGE_G923_???				0x8127
+
+/* no g923_ff_set_autocenter as I could not get that to work. */
+static int g923_get_config(struct hidpp_device *hidpp,
+			   struct hidpp_ff_private_data *data)
+{
+	struct hidpp_report response;
+	u8 feature_type;
+	int ret;
+
+	memset(data, 0, sizeof(*data));
+
+	ret = hidpp_root_get_feature(hidpp, HIDPP_PAGE_G923_FORCE_FEEDBACK,
+					     &data->feature_index, &feature_type);
+
+	if (ret)
+		return ret;
+
+	/* Read number of slots available in device */
+	ret = hidpp_send_fap_command_sync(hidpp, data->feature_index,
+					  HIDPP_FF_GET_INFO,
+					  NULL, 0,
+					  &response);
+
+	if (ret) {
+		if (ret < 0)
+			return ret;
+		hid_err(hidpp->hid_dev,
+			"%s: received protocol error 0x%02x\n", __func__, ret);
+		return -EPROTO;
+	}
+
+	data->num_effects = response.fap.params[0] - HIDPP_FF_RESERVED_SLOTS;
+
+	/* reset all forces */
+	ret = hidpp_send_fap_command_sync(hidpp, data->feature_index,
+					  HIDPP_FF_RESET_ALL,
+					  NULL, 0,
+					  &response);
+
+	if (ret)
+		hid_warn(hidpp->hid_dev, "Failed to reset all forces!\n");
+
+	ret = hidpp_send_fap_command_sync(hidpp, data->feature_index,
+					  0x12,				// Not sure what to call this.
+					  NULL, 0,
+					  &response);
+
+	printk(KERN_ALERT "g923_get_config: range from device = 0x%X", get_unaligned_be16(&response.fap.params[0]));
+
+	if (ret) {
+		hid_warn(hidpp->hid_dev,
+			 "Failed to read range from device!\n");
+	}
+	data->range = ret ?
+		900 : get_unaligned_be16(&response.fap.params[0]);
+
+	/* Read the current gain values */
+	ret = hidpp_send_fap_command_sync(hidpp, data->feature_index,
+					  0x02,				// Not sure what to call this.
+					  NULL, 0,
+					  &response);
+
+	if (ret)
+		hid_warn(hidpp->hid_dev,
+			 "Failed to read gain values from device!\n");
+	data->gain = ret ?
+		0xffff : get_unaligned_be16(&response.fap.params[0]);
+
+	/* ignore boost value at response.fap.params[2] */
+
+	//return g923_ff_set_autocenter(hidpp, data);
+	return ret;
+}
+
 /* -------------------------------------------------------------------------- */
 /* HID++1.0 devices which use HID++ reports for their wheels                  */
 /* -------------------------------------------------------------------------- */
@@ -3853,6 +3937,10 @@ static int hidpp_probe(struct hid_device
 		ret = g920_get_config(hidpp, &data);
 		if (ret)
 			goto hid_hw_init_fail;
+	} else if (connected && (hidpp->quirks & HIDPP_QUIRK_CLASS_G920)) {
+		ret = g923_get_config(hidpp, &data);
+		if (ret)
+			goto hid_hw_init_fail;
 	}
 
 	hidpp_connect_event(hidpp);
@@ -3872,7 +3960,7 @@ static int hidpp_probe(struct hid_device
 		goto hid_hw_start_fail;
 	}
 
-	if (hidpp->quirks & HIDPP_QUIRK_CLASS_G920) {
+	if (hidpp->quirks & HIDPP_QUIRK_CLASS_G920 || hidpp->quirks & HIDPP_QUIRK_CLASS_G923) {
 		ret = hidpp_ff_init(hidpp, &data);
 		if (ret)
 			hid_warn(hidpp->hid_dev,
@@ -4007,6 +4095,9 @@ static const struct hid_device_id hidpp_
 	{ /* Logitech G920 Wheel over USB */
 	  HID_USB_DEVICE(USB_VENDOR_ID_LOGITECH, USB_DEVICE_ID_LOGITECH_G920_WHEEL),
 		.driver_data = HIDPP_QUIRK_CLASS_G920 | HIDPP_QUIRK_FORCE_OUTPUT_REPORTS},
+	{ /* Logitech G923 Wheel over USB */
+	  HID_USB_DEVICE(USB_VENDOR_ID_LOGITECH, USB_DEVICE_ID_LOGITECH_G923_WHEEL),
+		.driver_data = HIDPP_QUIRK_CLASS_G923},// | HIDPP_QUIRK_FORCE_OUTPUT_REPORTS}, // Adding this mask causes G923 to fail with "Device not connected".
 	{ /* Logitech G Pro Gaming Mouse over USB */
 	  HID_USB_DEVICE(USB_VENDOR_ID_LOGITECH, 0xC088) },
 
--- hid-ids.h.orig	2020-10-14 19:51:22.202365351 -0400
+++ hid-ids.h	2020-10-14 19:51:33.225769689 -0400
@@ -763,6 +763,7 @@
 #define USB_DEVICE_ID_LOGITECH_G510_USB_AUDIO	0xc22e
 #define USB_DEVICE_ID_LOGITECH_G29_WHEEL	0xc24f
 #define USB_DEVICE_ID_LOGITECH_G920_WHEEL	0xc262
+#define USB_DEVICE_ID_LOGITECH_G923_WHEEL	0xc267
 #define USB_DEVICE_ID_LOGITECH_WINGMAN_F3D	0xc283
 #define USB_DEVICE_ID_LOGITECH_FORCE3D_PRO	0xc286
 #define USB_DEVICE_ID_LOGITECH_FLIGHT_SYSTEM_G940	0xc287
